<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>sus</title>

    <style>
        :root {
            --bg: hsl(0, 0%, 10%);
            --fg: hsl(0, 0%, 90%);
        }

        html, body {
            margin: 0;
            padding: 0;

            color: var(--fg);
            font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
            background-color: var(--bg);
        }

        main {
            padding: 2rem;
        }

        h1 {
            margin: 0;
        }

        table, th, td {
            border: 1px solid var(--fg);
            border-collapse: collapse;
        }

        th, td {
            padding: 0.45rem 0.3rem;
        }

        #entries {
            list-style: none;
            margin: 0;
            padding: 0;
        }

        #entries>li {
            margin-top: 1rem;

            border: 1.5px solid var(--fg);
            border-radius: 5px;
        }

        header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            font-size: 14pt;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <main>
        <h1>Zig Language Server Fuzzer</h1>

        <p>Note that results are not expected to be long-lasting. When documenting a result, copy the reproduction steps.</p>

        <ul id="entries">
            <% for (const entry of entries) { %>
                <li>
                    <article>
                        <header>
                            <code><%= entry.stderr.slice(0, entry.stderr.indexOf("\n")) %></code>
                            <time datetime="<%= new Date(entry.created_at).toISOString() %>"></time>
                        </header>
                    </article>
                </li>
            <% } %>
        </ul>
    </main>

    <script>
        const units = [
            {unit: "year", ms: 31536000000},
            {unit: "month", ms: 2628000000},
            {unit: "day", ms: 86400000},
            {unit: "hour", ms: 3600000},
            {unit: "minute", ms: 60000},
            {unit: "second", ms: 1000},
        ];
        const rtf = new Intl.RelativeTimeFormat("en", {numeric: "auto"});

        function relativeTimeFromDates(relative, pivot = new Date()) {
            if (!relative) return "";
            const elapsed = relative.getTime() - pivot.getTime();
            return relativeTimeFromElapsed(elapsed);
        }

        function relativeTimeFromElapsed(elapsed) {
            for (const {unit, ms} of units) {
                if (Math.abs(elapsed) >= ms || unit === "second") {
                    return rtf.format(Math.round(elapsed / ms), unit);
                }
            }
            return "";
        }


        [...document.querySelectorAll("time")].map(_ => _.innerText = relativeTimeFromDates(new Date(_.dateTime)));
    </script>    
</body>
</html>